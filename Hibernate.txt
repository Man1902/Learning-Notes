- ORM : programming technique to map application domain model objects to the relational database tables.(Java Application -> object -> ORM -> Database)
- Hibernate is open source, lightweight java based ORM framework.It simplifies the development of java application to interact with the database. 
- Advantages : 
 1) Eliminates boiler-plate 2) Provides support for XML as well as JPA annotations (that makes our code implementation independent)
 3) HQL support (database independent and object oriented and also understands inheritance,polymorphism and association)
 4) Supports lazy initialization using proxy objects 5) Cache support 6) Implicit transaction management 
 7) Provides an abstraction layer between application and database
1) Session factory (I) : factory of session.Client of connection provider.It holds second level cache (optional).Immutable and thread-safe.
2) Session (I) : Provides an interface between application and data stored in the database.It wraps the JDBC connection.It is a factory of Transaction,Query and 
   Criteria.It holds a first-level cache (mandatory) of data.It is not thread-safe object.Lifecycle of a session is bound by the beginning and end of a transaction.
3) Transaction (I): It specify atomic units of work. It abstracts the application from the underlying JDBC or JTA transaction.
4) getCurrentSession() : returns the session bound to the hibernate context.But for this, we need to configure it (hibernate.current_session_context_class) in 
   hibernate configuration file.we don’t need to close it explicitly.we should not use it in multi-threaded environment.
5) openSession() : always opens a new session.We should close it once we are done with all the database operations.For web appication,We should open a new 
   session for each request/session in multi-threaded environment.(Based on requirment)
6) openStatelessSession() : Returns instance of StatelessSession.It doesn’t provide any benefits of hibernate (e.g first and second level cache,Collections etc)
   It can be useful in case where you want load bulk data and you don’t want to cache it in hibernate's first level cache memory.
7) Persistent : When persistent class(POJO) object is associated with a unique session,it’s in persistent state.Instance returned by a get() or load() method is
   persistent.
8) Transient : When an object is never persisted or not associated with any session, it’s in transient state. Transient instances may be made persistent by 
   calling save(), persist() or saveOrUpdate().Persistent instances may be made "transient" by calling "delete()".
9) Detached : Once we close the Hibernate Session or use clear()/evict() method, the persistent instance will become a detached instance.Detached instances may
   be made persistent by calling update(),saveOrUpdate(),lock() or merge().
10)				session.get()														session.load()
   * loads the data as soon as it’s called.					   		* Returns a proxy object and loads data only when it’s actually required(support lazy loading)
   * It returns null if object is not found in cache as well as 	* It throws "ObjectNotFoundException" if object is not found on cache as well as on database
	 on database													  but never return null.
   * Use get method to determine if an instance exists or not.		* Use load method only when we know data exists 
11) save() : It returns the generated id immediately (because primary object is saved as soon as thid method is invoked).We can invoke this method 
    outside a transaction also, In such case if we have cascading between entities, then only the primary entity gets saved unless we flush/commit the session.
	For persistent object, save updates the data through update query.
12) persist() :We can use persist() method only within the boundary of a transaction, so it’s safe and takes care of any cascaded objects. It doesn’t return 
    anything so we need to use the persisted object to get the generated identifier value.
13) saveOrUpdate() : results into insert or update queries based on the provided data.Can be used without transaction(which can create issues for mapped objects)
14) update() : 
15 merge() : can be used to update existing values,however this method create a copy from the passed entity object and return it.The returned object is part of 
  persistent context and tracked for any changes, passed object is not tracked.
- save(),persist() and saveOrUpdate() methods adds the entity object to persistent context and track any further changes.Any further changes are saved at the 
  time of committing transaction.
- Java Persistence API (JPA) is the java standard for mapping Java object to a relational database. It provides specification for managing the relational data 
  in applications. Popular implementation : Hibernate, Apache OpenJPA, EclipseLink
- Hibernate provides implementation of Java Persistence API.Hibernate EntityManager implements the interfaces and life cycle defined by the JPA specification.
- JPA basic Annotations : @Entity, @Access, @Table, @Id, @EmbeddedId, @Column, @GeneratedValue, @PrimaryKeyJoinColumn, @OneToOne, @OneToMany, @ManyToOne etc
- Hibernate Annotations : @GenericGenerator, @Cascade
- Hibernate configuration file contains database specific configurations and used to initialize SessionFactory.It also contains Dialect information, so that 
  hibernate knows the database type and mapping file or class details.
- Hibernate mapping file is used to define the entity bean fields and database table column mappings.JPA annotations can be used for mapping but sometimes XML 
   mapping file comes handy when we are using third party classes and we can’t use annotations.
- SessionFactory sessionFactory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
- We can create our own id generator by implementing IdentifierGenerator(I).
- We can map collection elements (List,Set,Map,Collection) of persistent class in hibernate.
- List and Map are index based collection, so an extra column will be created in the table for indexing.
- In case of Map, index column works as the key and element column works as the value.
- Unidirectional association provides navigational access in one direction only.While Bidirectional association provides navigational access in both directions,
  so that you can fetch the other side without explicit queries.It also allows you to apply cascading options to both directions.
- Cascade mechanisam provide abstraction for save/update/delete of assocaiated entries(changes will automatically propagate to the associated entities)
- In bi-directional relationship, mappedBy attribute is provided on the object which does not contains foreign key.It inidacte that "this entity is not ownwer of
  the relationship, ownership is governed by other entity".It is the job of other enitiy (who doesn't have mappedBy attribute) to maintain the association.
- One-to-One Assosiation  : One entity can have only one entity reation.We can map one-to-one mapping using many-to-one tag
   (foreign key association) or using one-to-one tag (primary key association)
- In foreign key association one entity will hold primary key of second entity.(e.g User will hold addressId as a foreign key)  
- In primary key association,  both the tables share same primary key.
- One-to-Many Mapping : One row in a table can be mapped to multiple rows in another table. (e.g One Cart - Multiple Iteams)
- Many-to-Many Mapping : This mapping is usually implemented in database using a Join Table.
- Object of Entity Type : has its own database identity.It has stand alone existance.
- Object of Value Type (Value Object) : belongs to an entity, and its persistent state is embedded in the table row of the owning entity. Value types don’t have
  identifier properties.It doesn't have stand alone existance.Its main use is to provide value to entity object.
- Assosication mapping maps the dependent object as an enitiy (Entity inside Entity).
- Component mapping maps the dependent object as a component (value object).Component is an object that is stored as an value rather than entity reference.It is
  used in case of composition (HAS-A relation).
- <component> sub element of <class> or @Embeddable and @Embedded annotations are used to map component value object inside entity class.
- Default fetch stratrgy is Lazy initialization. that means while getting data , hibernet will fetch only first level members variables.
- Hibernet implements lazy initialization using proxy class. when you will call get method on session object,it will return proxy object of proxy class of actual
  entity.(not object of actual entity class) by populating first level member variables only.so when you will invoke getter collection of object, proxy class 
  will interact with database and it will get and populate the second level member data.
- Inheritance strategy : 
1) SINGLE_TABLE (Single table per hierarchy) : single table is required to map the whole hierarchy, an extra column (discriminator column) is added to identify 
   the class.But nullable values will be stored in the table. (<subclass>)
2) TABLE_PER_CLASS ( Table per concrete class ): Contains tables equavalent to no of classes without any relation.So there are no nullable values.
   But duplicate columns (of super class table) are added in all subclass tables. (<union-subclass>)
3) JOINED (Table Per Subclass) : Contains tables equavalent to no of classes by primary key and foreign key relationship.no duplicate columns of super class.
   (<joined-subclass>) (<key> or @PrimaryKeyJoinColumn)
- HQL is object oriented version of SQL query. Database independent.
- Criteria is used to fetch results using more object oriented approach.
- Named qery is used to group queries at central location (in entity class or hbm file).Its syntax is checked when the hibernate session factory is created.
  Thus,making the application fail fast. Disadvantage : Hard to Debug.
- First level cache : "Session" object holds the first level cache data.Enbled by default. evict() / clear() can be used to remove object from the cache.
- Second level cache : "SessionFactory" object holds the second level cache data.It will  be availabe to entire application.
- Query cache : caches result set of Query.Doesn't cache the state of the actual entities in the cache;it caches only identifier values and results of value type.
- Second level CacheConcurrencyStrategy : 
  1) read-only : It should be used for persistent objects that will always read but never updated.It’s good for reading and caching application configuration 
     and other static data that are never updated.
  2) nonstrict read-write (but one at a time) : It is used when application occasionally needs to update data and strict transaction isolation is not required.
  3) read-write (simultaneously) : It’s good for persistent objects that can be updated by the hibernate application.However if the data is updated either 
     through backend or other application than cache will not work.So while using this strategy, make sure you are using Hibernate API for updating the data.
  4) transactional : It provides support for fully transactional cache providers such as JBoss TreeCache.It can only be used in a JTA environment and you must 
     specify hibernate.transaction.manager_lookup_class
- <cache usage="read-only" region="employee" />  or @Cache(usage=CacheConcurrencyStrategy.READ_ONLY, region="employee")
- Statistics provides the statistics of Hibernate SessionFactory (e.g  fetch count,second level cache hit, miss and put count etc).It is disabled by default.
- To clear second level cache data : 
  Map<String, ClassMetadata> classesMetadata = sessionFactory.getAllClassMetadata();
  for (String entityName : classesMetadata.keySet()) {
	sessionFactory.evictEntity(entityName);
  }