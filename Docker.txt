	Note : Edureka till 5 done
Account : docerId : username Mail Id : mail@gmail.com
- Note : For Window7, add C:\Program Files\Docker Toolbox into path variable.

- Virtualization : process of creating a guest OS (Virtul machine) on a top of host OS.It is a virtualization at hardware level.
  Host OS -> Hypervisor (Virtual machine monitor) -> VM1(Guest OS -> Bins&Libs -> App1) |  VM2(Guest OS -> Bins&Libs -> App2) 
- Pros : 
  * Multiple OS in same machine. 
- Cons : 
  * Unsatable performance.
  * Wastage of resource.
  * Long boot-up process.
- Containerization (Container based) is an OS level virtualization method for deploying and running distributed applications without launching an entire VM for
  each application. 
  Host OS -> Docker Engine (Container Engine) -> Container1(Bins&Libs -> App1) | Container2(Bins&Libs -> App2)
- Cons : 
  * Container on same host OS are lighter and smaller
  * Better resource utilization
  * Short boot-up process.
  * Integration in Docker is faster, Cheap and Easily scalable.
- Docker is a container management service.(Build, Ship and Run) which packages your application and all its dependencies together in the form of containers
  so as to ensure that your application works seemlessly in any environments.
- It is designed to make it easier to create,deploy and run applications using containers.
- Docker containers are lightweight alernatives to virtual machines and uses the host OS.
- You don't have to pre-allocate any RAM in containers.
- How docker works ?
		Docker CLI (client) 		<-- Rest API --> 		Docker Host (Docker Daemon , Docker Toolbox (windows OS)) (Server)
  * Docker engine is a heart of docker system. 
  * Docker engine uses client server architecture which communicates using REST API
  * Docker engine is simply the docker application that is installed on your host machine.
  *  Docker daemon : Runs on host machine.It creates and manages docker objects : Images,containers,Networks,Volumes,data etc
  * Docker client : Primary user interface to Docker.It accepts commands from the user and communicates back and forth with a Docker daemon.		
- Docker Architecture :   
	        Client 								Docker Host							Registry
		(docker build | pull | run)		Docker Daemon, Containers and Images	
- Docker components : 
  1) Docker image : 
     * Docker image is readonly template which is used to create container.Stored in Docker Hub or your local registry. (using build command)
     * Docker image is the collection of all files, libraries, binaries and other dependencies forming an executable software application.
  2) Docker container : 
     * Docker container is an isolated application platform.It contains everthing needed to run the application.It can be build from one and more images.
	 * A way to package application with all the necessary dependecies and configuration.
	 * Portable artifact, easily shared and moved around.
	 * Makes development and deployment more efficient.
  3) Docker registry : 
     * Docker registry is a storage component for Docker images.We can store the images in either public/private repositories.
     * Docker Hub is docker's own cloud repository.
  4) Docker file : 
     * It contains instruction for building a Docker image.
	   1) FROM : inidicates the base image from which the container is built.
	   2) ADD : 
	   3) EXPOSE : to delcare port
	   4) ENTRYPOINT : 
	   5) RUN :  indicates the command that needs to be executed on the image.
		  FROM openjdk:8
		  ADD target/eureka-service-0.0.1-SNAPSHOT.jar eureka-service.jar
		  EXPOSE 9090
		  ENTRYPOINT ["java", "-jar", "eureka-service.jar"] 
- Building Images : 
  * Images are comprised of mulitple layers.
  * Each layer in an image is an image of its own
  * They comprise of a base image layer which is read-only.
  * Any changes made to an image are saved as layers on top of the base image layer.
  * Containers are generated by running the image layers which are stacked one above the other.
- Command to build and run image : 
	  docker build -t <ImgName:Tag> .	OR	docker build -f Dockerfile -t <ImgName> .
	  docker run <ImgName:Tag>/<Id>		OR	docker run -p <H-port>:<C-port> <ImgName>	
  * If ms app is not accessible directly using localhost , 127.0.0.1 , 0.0.0.0  than access it using docker host URL.
    * echo %DOCKER_HOST% e.g tcp://192.168.88.100:2376)
    * http://192.168.88:9090/test
  
- Docker compose :  
  * Docker compose makes it easier to configure and run applications made up  of mutliple containers.e.g by defining web app and DB containers configration 
    in one YAML file and then running those contected containers with a single command.
- Docker swarm : 
  * Docker swarm provides native clustering capabilities to turn a group of Docker engines into a single, virtual Docker Engine.
  * With these pooled resources, you can scale out your application as if it were running on a single,huge computer.


- Commands (DockerId : username) : 
docker --version
docker --help
docker login										// to pull and push images from Docker Hub 

docker pull <ImgName:tag>							// to pull a docker image from Docker Hub.tag optional and default is latest
docker tag <LocImgName:Tag> <DocId>/<ImgName:Tag>	| Here Tag is Optional
docker push <DocId>/<ImgName:Tag>			    	| to push a docker image into Docker Hub. DocId is DocerId 
docker run <ImgName:Tag>/<Id>						// to run that image
docker run -p <HP>:<CP> <ImgName>					| HP:host port, C:Container port OR
docker run -d -p <HP>:<CP> <ImgName>				| to run container in detached mode OR
docker run -p <HP>:<CP> --restart=always <ImgName>  | after restart of docker engine, container will start automatically OR 
docker run -p HP:CP -m 512m --cpu-quota 5000 <IN>   | 
docker images 										// to list down all images
docker history <ImgName/Id>							| to see all the commands that were run with an image OR
docker image history <ImgName/Id>					|
docker inspect <ImgName/Id>							| to see the details of an image or container.  OR
docker image inspect <ImgName/Id>					|
docker search <ImgName>								// 
docker build -t <ImgName:Tag> .						// to build an image OR 
docker build -f Dockerfile -t <ImgName> .			// to build an image
docker rmi <ImgName/Id>								| to delete the image OR
docker image remove <Id>							|

docker ps											// to list down all the running containers
docker ps -a				    					// to list down all the containers (even if they are not running)
docker start <ContId>								// to start the container
docker stop <ContId>								// to stop the container gracefully by waiting for  other dependecies to shut down
docker kill <ContId>								// to stop the container forcefully  (to stop immediately)
docker rm <ContId>									// to delete the container (after stopping it)
docker container run <ContId>						// to run container
docker container start <ContId>						// to start container
docker container stop <ContId>						// to stop container
docker container kill <ContId>						// to kill runnig container
docker container pause <ContId>						// to pause container
docker container unpause <ContId>					// to unpause container
docker container inspect <ContId>					// to inspect container
docker container rm <ContId>						// to delete the container
docker container ls -a								// 
docker container prune								// to remove all the stopped containers
docker container logs <ContId>						// to check log of container
docker exec -it <ContId> bash						// to access running container and perform operations inside the container
docker commit <ContId> <DocId>/<ImgName>			// to creates a new image of an edited container on local repo
docker export --output="backup" <ContId> 			// to export a docker image into a tar file (.tgz) in your local repo
docker import /dir/backup.tgz  						// to import a docker image into your local repo
docker top <ContId>									//
docker stats										// 

docker-compose build								| to run multiple container applications Note : this command is exected in 
docker-compose up									| the directory where YML file is present for building the Compose

docker swarm init --advertise-addr 192.168.1.100 	| this commands creates a network of Docker engines/hosts to execute containers
docker swarm join								 	| in parallel (for scalling up and high availability)
docker swarm join-token							 	|
docker swarm leave								 	| to leave worker node
docker swarm leave --force						 	| to leave maanagr node
							    
docker events
docker system df
								
docker service ls									| docker service command is used to control any existing docker servie (Container/Compose/Swarm)
docker service ps
docker service scale
docker service stop
docker service logs
docker service rm 