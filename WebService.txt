* Web service is a sofware system designed to support interoperable machine to machine interaction over a network.
  * Designed for machine to machine (or application to application) interaction.
  * Should be interoperable - not platform dependent
  * Should allow communication over a network


---------------------------------------------------------
- Service Oriented Architecture or SOA is a design pattern. It is designed to provide services to other applications through protocol. It is a concept only and
  not tied to any programming language or platform.
- Web service is a client server communication application.It is language independent.
1) SOAP(Simple Object Access Protocol) web services : 
   * SOAP is XML based protocol for accessing web services.
   * WSDL(Web Services Description Language) is a xml document containing information about SOAP web services such as method name, method parameter and how to 
     access it.It acts as an interface between web service applications.
   * SOAP defines its own security.It uses XML format that must be parsed to be read. 
   * It defines many standards that must be followed while developing the SOAP applications.
   
2) REST(REpresentational State Transfer) web services : 
  * REST is an architectural style not a protocol.In REST Architecture everything is a resource(not action).
  * REST Server simply provides access to resources and the REST client can accesse or add the resources. Here each resource is identified by URIs.	
  * RESTful Web Services are fast because there is no strict specification like SOAP.It is Language and Platform independent.
  * RESTful web services can use SOAP web services as the implementation.
  * RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.
  * JAX-RS is a specification comprise of set of interfaces and annotations offered by Java EE to implement REST web services.
    Implementation are : Jersey and RESTeasy.
  * RESTful Web Service Design considerations : 
    1) Resource based URIs(not action baded)
	2) HTTP Methods
	3) HTTP Status codes
	4) Message Headers
  * Collection resource URIs : /profiles, /messages, /messages/{messageId}/comments
  * Instance resource URIs : /profiles/{profileName}, /messages/{messageId}, /messages/{messageId}/comments/{commentId}
  * GET,PUT, and DELETE are idempotent(can be repeatable) methods while POST is non-idempotent (can't be repeatable will duplicate) method.So,It is better to use 
    PUT for update operation.
		GET : /messages (all messages) , GET : /messages/{messageId} (single message)  
		POST : /messages (to add new)
		PUT : /messages/{messageId} (to update) 
		DELETE : /messages/{messageId} (to delete)
  * HTTP Status Codes : 
		1XX : Informational 
		2XX : Success 
		3XX : Redirection 
		4XX : Client Error 
		5XX : Server Error
  * HATEOAS (Hypermedia As The Engine Of Application State) : 
    * With the help of HATEOAS implementation, REST client needs little to no prior knowledge about how to interacte with REST application.
	* REST client enters a REST application through a simple fixed URL.All future actions the client may take are discovered within resource representations 
	  returned from the server.e.g 
		  {
			"id" : 1,
			"content" : "Hi",
			"links" : [
						{
							"href" : "http://localhost:8080/WSUsingJersey/messages/1",
							"rel" " "self"
						},
						{
							"href" : "http://localhost:8080/WSUsingJersey/messages/1/comments",
							"rel" " "comments"
					   }
					  ]
		  }
  * Richardson Maturity Model : 
    1) Level 0 : not REST. 
	2) Level 1 : Resources based URIs  
	3) Level 2 : HTTP methods usage  
	4) Level 3 : with HATEOAS implementation
  * Content Negotiation : 
		Client : Accept Header -> Server : @Produces : to define all possible type of content for response. 
		Client : Content-Type Header -> Server : @Consumes : to allows possible type of content for incoming request.
  * Application class with @ApplicationPath("rest") is used to bootstrap rest web application without xml configuration(servelt configuration).It will do classpath
    scan to find all defined resources.
  * JAX-RS resource scopes : 1) request 2) singleton
	* Default scope of JAX-RS resource is request scope.Meanse for every new request, new instance for the resource will be created.@Singleton is used to define
      singleton scope for the resource.
    * In request scope, instance will be created after request call, so we can use path/query param as a member variables. But, for singleton resource,instance
      will be created before request call.so, we can't use path/query param as a member variables.
  * To convert String value of path/query param into custom type, we have to implement ParamConverterProvider interface.
  * We can implement MessageBodyWriter for converting our custom Java types to a stream. 
  * We can define our custom media type by writing custom MessageBodyReader/MessageBodyWriter.
  * Invocation builder is used to prepare client request, which can be latter invoked by client by calling invoke method.
  * GenericType needs to be pass in respective HTTP method call, to get response of that particular type.
  * In JAX-RS,Filters are used to manipulate request and response params(headers,URIs etc).
    * For server side : 1)ContainerRequestFilter 2) ContainerResponseFilter
    * For client side 1) ClientRequestFilter 2) ClientResponseFilter. Example : logging,security
  * In JAX-RS, Interceptors are used to manipulate entities (input and output stream).For Server and client side : 1) ReaderInterceptor 2) WriterInterceptor.
    Example : Encoding and Entity response.
  
          ClientRequestFilter  WriterInterceptor  MessageBodyWriter  |  ContainerRequestFilter  ReaderInterceptor MessageBodyReader
                   |                    |                 |          |           |                      |                |
 JAX-RS -------------------------------------------------------------|----------------------------------------------------------------> JAX-RS
 Client <------------------------------------------------------------|----------------------------------------------------------------- Server          
                   |                    |                 |          |           |                  |                    |              
          MessageBodyReader  ReaderInterceptor  ClientResponseFilter |  MessageBodyWriter  WriterInterceptor  ContainerResponseFilter  
 
  * Authentication mechanisams : 
	1) Basic authentication : send encrypted username:password as header parameter.e.g  Authorization : Basic YWRtaW46YWRtaW4=
	2) Digest access authentication :  
	3) Asymetric cryptography
	4) OAuth : 
	5) JSON Web Tokens : 

- Spring REST vs JAX-RS annotation : 
				Spring Rest												JAX-RS Annotation
	@RequestMapping("/users")										@Path("/users")
	@RequestMapping(path="/users",method=RequestMethod.GET)			@GET("/users")
	@RequestMapping(method=RequestMethod.GET)						@GET
	@RequestMapping(method=RequestMethod.POST)						@POST
	@RequestMapping(method=RequestMethod.DELETE)					@DELETE
	@PathVariable("empId")											@PathParam("empId")
	@RequestParam("empId")											@QueryParam("empId")	(starts with ? )									
	@RequestParam(value = "empId")									@FormParam("empId")
	@RequestMapping(produces = "{application/json}")				@Produces({MediaType.APPLICATION_JSON})
	@RequestMapping(consumes = "{application/json}")				@Consumes({MediaType.APPLICATION_XML})
	@RequestBody													NA
	@ResponseBody													NA
																	@MatrixParam : starts with ; (semicolun)
																	@HeaderParam , @CookieParam , 
																	@Context , @BeanParam
																	@Provider
