1) What is Monolitihc Architecture ? 
- Monolitihc Architecture is like a big container wherein all the software components of an application are assembled together and tightly packaged.  

2) What are the pros and cons of Monolitihc Architecture ? 
- Props / benefits :
  * Simple to develop - the goal of current development tools and IDEs is to support the development of monolithic applications
  * Simple to deploy - you simply need to deploy the WAR file (or directory hierarchy) on the appropriate runtime
  * Simple to scale - you can scale the application by running multiple copies of the application behind a load balancer
- Cons / Problems  : 
 * Large and complex application : modularity breaks down.Difficult to understand and implement the new changes. Quality of code decline over time.
 * Slow development : As application grow in size,it is difficult to understand and modify. Makes developer less productive.
 * Block continuous deployment : In order to update one component, need to redeploy whole application.
 * Unscalable (as some compoments are CPU insentive and some are Memory insentive).Each components can not be scale individually.
 * Unreliable (as all component are tighly coupled).If one service fails, It will lead down fall of the entire application.
 * Inflexible (Difficult to adopt new framewrok/language) : Requires a long-term commitment to a technology stack 
 * Obstacle to scaling development : it prevents the teams from working independently. The teams must coordinate their development efforts and redeployments.

3) What is Microservices Architecture ?
- Microservices is an architectural style that structures an application as a collection of small autonomous services, modelled around a business domain.
  In Microservices Architecture, each service is self-contained and implements sinlge business capability.

4) What are the pros and cons of Microservices Architecture ? 
- Advantages / Features of Microservices Architecture :
  1) Independent Development (Easy to build and Maintain).Loosely coupled (Decoupling)
  2) Independent Deployment (Continuous Delievery)
  3) Fault Isolation
  4) Mixed technology stack (Langauage Neutral)
  5) Granular scaling (single service can be easily scale up without having to scale the entire application)
  6) Small Focused / Bounded context (Componentization) : single business capability
  7) Decentralized Governance
- Drawbacks  of Microservices Architecture : 
  * Developers must deal with the additional complexity of creating a distributed system : inter-service communication 
  * Deployment complexity : operational complexity of deploying and managing a system comprised of many different services.
  * Increased memory consumption.
  
5) What are best practices to design microservices ?
  * Seprate data store for each microservices
  * Seprate build for each microservices
  * Deploy in container
  * Treat servers a stateless

- Challangges with Microservices : 
  1) To identify Bounded Contexnt
  2) Configuration management
  3) Visibility / Debugging : Centeralize logging and monitoring
  4) Fault Tolerance
  5) Automating the components (Build,Deployment,monitoring etc)
  6) Dynamic Scale Up and Scale Down
  7) Consistency
--------------------------------------------------------------------------------------------------  
- Microservices architecture patterns :  
1) Decomposition : 
   1) Decompose by business capability : 
      * Define services corresponding to business capabilities.business capability is something that a business does in order to generate value. A business 
	    capability often corresponds to a business object. e.g Order Management is responsible for orders, Customer Management is responsible for customers
	  * Business capabilities are often organized into a multi-level hierarchy.e.g Product/Service development, Product/Service delivery, Demand generation
	  * The  business capabilities of an online store include : Product catalog management, Inventory management, Order management, Delivery management
	  * benefits : 
	    * Stable architecture since the business capabilities are relatively stable
		* Development teams are cross-functional, autonomous, and organized around delivering business value rather than technical features
		* Services are cohesive and loosely coupled
	 * Issues : 
	   * Identifying business capabilities and hence services requires an understanding of the business.
	   * An organization’s business capabilities are identified by analyzing the organization’s purpose, structure, business processes, and areas of expertise.
	   * Bounded contexts are best identified using an iterative process. Good starting points for identifying business capabilities are:
	     * organization structure - different groups within an organization might correspond to business capabilities or business capability groups.
		 * high-level domain model - business capabilities often correspond to domain objects
		 
   2) Decompose by subdomain : 
      * Define services corresponding to Domain-Driven Design (DDD) subdomains. DDD refers to the application’s problem space - the business - as the domain. 
	  * A domain is consists of multiple subdomains. Each subdomain corresponds to a different part of the business.
   
   3) Self-contained Service : Pending (check after Saga and CQRS)
      * A self-contained service uses the Saga pattern to asynchronously maintain data consistency. 
	  * It uses the CQRS pattern to maintain a replica of data owned by other services.
	  * benefits : 
	    * Improved availability and response time
	  * drawbacks :
        * Increased cost and complexity of using CQRS
		* Increased complexity of using sagas
		* Less straightforward API when using sagas
		* Larger service due to functionality being implemented in the service instead of as a separate service	  
   
   4) Service per team : 
      * Each service is owned by a team, which has sole responsibility for making changes. Ideally each team has only one service.
	  * Each team is responsible for one or more business functions (e.g. business capabilities). 
	  * A team owns (has sole responsibility for changing) a code base consisting of one or more modules. 
	  * Its code base is sized so as to not exceed the cognitive capacity of team. 
	  * The team deploys its code as one or more services. A team should have exactly one service unless there is a proven need to have multiple services.
	  * benefits : 
	    * Enables each team to be autonomous and work with minimal coordination with other teams.Enables the teams to be loosely coupled
		* Improves code quality due to long term code ownership
	  * drawbacks :
	    * Implementing features that span services is more complicated and requires teams to collaborate
	 
2) Refactoring to microservices (migrate a legacy monolithic application to a microservice architecture): 
   1) Strangler Application : 
	  * Modernize an application by incrementally developing a new (strangler) application around the legacy application.In this scenario, the strangler application 
	    has a microservice architecture.
      * The strangler application consists of two types of services. First, there are services that implement functionality that previously resided in the monolith.
	    Second, there are services that implement new features. The latter are particularly useful since they demonstrate to the business the value of using microservices.
   
   2) Anti-corruption layer :
      * Define an anti-corruption layer, which translates between the two domain models (legacy monolith’s domain model and the domain model of a new service)   

3) Data management :    
   1) Database per service : 
      * Keep each microservice’s persistent data private to that service and accessible only via its API. A service’s transactions only involve its database.
	    * Private-tables-per-service – each service owns a set of tables that must only be accessed by that service
        * Schema-per-service – each service has a database schema that’s private to that service
        * Database-server-per-service – each service has it’s own database server.
	  * benefits : 
        * Helps ensure that the services are loosely coupled. Changes to one service’s database does not impact any other services.
	    * Each service can use the type of database that is best suited to its needs.
      * drawbacks : 	 
	    * Implementing business transactions that span multiple services is not straightforward. Distributed transactions are best avoided because of the CAP theorem. 
		* Implementing queries that join data that is now in multiple databases is challenging.
		* Complexity of managing multiple SQL and NoSQL databases
		
   2) Shared database : 
      * Use a (single) database that is shared by multiple services. Each service freely accesses data owned by other services using local ACID transactions.
      * benefits : developer uses familiar and straightforward ACID transactions to enforce data consistency.single database is simpler to operate
      * drawbacks  : 
        * Development time coupling (when schema changes happen)
		* Runtime coupling : because all services access the same database they can potentially interfere with one another (lock issue)
		* Single database might not satisfy the data storage and access requirements of all services
		
   3) Saga : 
	  * A saga is a sequence of local transactions.
	  * Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. 
	  * If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.
	  * There are two ways of coordination sagas:
        1) Choreography - each local transaction publishes domain events that trigger local transactions in other services. e.g 
		   * The Order Service receives the POST /orders request and creates an Order in a PENDING state.
		   * It then emits an Order Created event
		   * The Customer Service’s event handler attempts to reserve credit
		   * It then emits an event indicating the outcome (credit reserved or credit limit exceed)
		   * The OrderService’s event handler either approves or rejects the Order according to the event raised by customr service.
        2) Orchestration - an orchestrator (object) tells the participants what local transactions to execute. e.g
		   * The Order Service receives the POST /orders request and creates the Create Order saga orchestrator
		   * The saga orchestrator creates an Order in the PENDING state
		   * It then sends a Reserve Credit command to the Customer Service
		   * The Customer Service attempts to reserve credit
		   * It then sends back a reply message indicating the outcome
		   * The saga orchestrator either approves or rejects the Order
      * benefits:
	    * It enables an application to maintain data consistency across multiple services without using distributed transactions
	  * drawbacks:
	    * The programming model is more complex.Developer must design compensating transactions that explicitly undo changes made earlier in a saga.
		
   4) API Composition : (To query data from diffrent microservices)
      * Implement a query by defining an API Composer, which invoking the services that own the data and performs an in-memory join of the results.
	  * An API Gateway often does API composition.
	  * It is a simple way to query data in a microservice architecture
	  * Some queries would result in inefficient, in-memory joins of large datasets.
   
   5) CQRS : Command Query Responsibility Segregation
      * Define a view database (History view database), which is a read-only replica that is designed to support a query that retrieves data from multiple services.
	  * The application (History service) keeps the replica up to data by subscribing to Domain events (Order event,Delivery event) published by the service that own the data.
	  * benefits : 
	    * Supports multiple denormalized views that are scalable and performant
        * Improved separation of concerns = simpler command and query models
        * Necessary in an event sourced architecture
	  * drawbacks : 
	    * Increased complexity. Potential code duplication. Replication lag/eventually consistent views
   
   6) Domain event : 
      * Organize the business logic of a service as a collection of DDD aggregates that emit domain events when they created or updated. 
	  * The service publishes these domain events so that they can be consumed by other services.
	  
   7) Event sourcing : 
      * Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. 
	  * Whenever the state of a business entity changes, a new event is appended to the list of events. 
	  * Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.
	  * Applications persist events in an event store, which is a database of events. The store has an API for adding and retrieving an entity’s events. 
	  * The event store also behaves like a message broker. It provides an API that enables services to subscribe to events. 
	  * When a service saves an event in the event store, it is delivered to all interested subscribers.
	  * Some entities, such as a Customer, can have a large number of events. In order to optimize loading, an application can periodically save a snapshot of an
  	    entity’s current state. To reconstruct the current state, the application finds the most recent snapshot and the events that have occurred since that
		snapshot. As a result, there are fewer events to replay. 
	  * benefits : 
	    * It solves one of the key problems in implementing an event-driven architecture and makes it possible to reliably publish events whenever state changes.
		* Because it persists events rather than domain objects, it mostly avoids the object-relational impedance mismatch problem.
		* It provides a 100% reliable audit log of the changes made to a business entity
		* It makes it possible to implement temporal queries that determine the state of an entity at any point in time.
		* Event sourcing-based business logic consists of loosely coupled business entities that exchange events. This makes it a lot easier to migrate from a 
		  monolithic application to a microservice architecture.
	  * drawbacks:
	    * It is a different and unfamiliar style of programming and so there is a learning curve.
		* The event store is difficult to query since it requires typical queries to reconstruct the state of the business entities. That is likely to be complex
  		  and inefficient. As a result, the application must use Command Query Responsibility Segregation (CQRS) to implement queries.This in turn means that applications must handle eventually consistent data.
	  
	  
4) Transactional messaging : 
   1) Transactional outbox : 
   2) Transaction log tailing : 
   3) Polling publisher : 

5) Testing : 
   1) Service Component Test
   2) Consumer-driven contract test
   3) Consumer-side contract test

6) Deployment patterns : 
   1) Multiple service instances per host
   2) Service instance per host
   3) Service instance per VM
   4) Service instance per Container
   5) Serverless deployment
   6) Service deployment platform
   
7) Cross cutting concerns : 
   1) Microservice chassis
   2) Service Template : 
   3) Externalized configuration
  
8) Communication style : 
   1) Remote Procedure Invocation
   2) Messaging
   3) Domain-specific protocol
   4) Idempotent Consumer
   
9) External API : 
   1) API gateway
   2) Backend for front-end
   
10) Service discovery : 
	Client-side discovery
	Server-side discovery
	Service registry
	Self registration
	3rd party registration

11) Reliability : 
	1) Circuit Breaker : 
	
12) Security : 
	1) Access Token : 
	
13) Observability : 
	Log aggregation
	Application metrics
	Audit logging
	Distributed tracing
	Exception tracking
	Health check API
	Log deployments and changes
	
14) UI patterns : 
	Server-side page fragment composition
	Client-side UI composition
--------------------------------------------------------------------------------------------------  
- Patterns for distributed transactions within a microservices architecture : 
1) 2pc (two-phase commit) : 
- It has two phases: A prepare phase and a commit phase.
- In the prepare phase, all microservices will be asked to prepare for some data change that could be done atomically. Once all microservices are prepared, the 
  commit phase will ask all the microservices to make the actual changes.
- Normally, there needs to be a global coordinator to maintain the lifecycle of the transaction, and the coordinator will need to call the microservices in the 
  prepare and commit phases.
- Advantage : very strong consistency protocol. allows read-write isolation
- Disadvantage : It is synchronous (blocking).
2) Saga pattern : 
- It is asynchronous and reactive.In this pattern, the distributed transaction is fulfilled by asynchronous local transactions on all related microservices. The
  microservices communicate with each other through an event bus.
- Whenever first Microservice receives a request to update/create a data, It first starts a local transaction to update/create data and then emits an Created 
  event.The second Microservice listens for this event and updates its data once the event is received.If updation is successfully,Updated event will then be 
  emitted, which in this example means the end of the transaction.
- If any microservice fails to complete its local transaction, the other microservices will run compensation transactions to rollback the changes. 
- Advantages : support for long-lived transactions.
- Disadvantages  : difficult to debug when many microservices are involved.Event messages could become difficult to maintain if the system gets complex.
  It does not have read isolation.
- To address the complexity issue of the Saga pattern, it is quite normal to add a process manager as an orchestrator. The process manager is responsible for 
  listening to events and triggering endpoints.
--------------------------------------------------------------------------------------------------
- 12 Factor App  (best practices for cloud native app):
1) Codebase : 
   * One codebase tracked in revision control(VCS), many deploys.
2) Dependencies : 
   * Explicitly declare and isolate dependencies.
3) Config : 
   * Store config in the environment.
4) Backing service : 
   * Treat backing services as attached resources.
   * It can be configurable and can be switch easily from one backing service to other one by changig configuration. 
5) Build, release, run : 
   * strictly seprate build and run stages.
   * Should be independent of environment.
6) Processes : 
   * Execute app as one or more stateless processes.
7) Port binding : 
   * Export services via port binding
8) Concurrency : 
   * Scale out via the process model. Vertical or Horizontal scaling.
9) Disposability : 
   * Maximize robustness with fast startup and graceful shutdown.
10)Dev/Prod parity : 
   * Keep development, staging, and production as similar as possible.
11)Logs : 
   * Treat logs as event streams.
12)Admin processes : 
   * Run admin/management tasks as one-off processes.
--------------------------------------------------------------------------------------------------
 
				SOA																Microservices
* Follows “share-as-much-as-possible” architecture approach		* Follows “share-as-little-as-possible” architecture approach
* Importance is on business functionality reuse					* Importance is on the concept of “bounded context”
* They have common governance and standards						* They focus on people collaboration and freedom of other options
* Uses Enterprise Service bus (ESB) for communication			* Simple messaging system
* They support multiple message protocols						* They use lightweight protocols such as HTTP/REST etc.
* Multi-threaded with more overheads to handle I/O				* Single-threaded usually with the use of Event Loop features for non-locking I/O handling
* Maximizes application service reusability						* Focuses on decoupling
* Traditional Relational Databases are more often used			* Modern Relational Databases are more often used
* A systematic change requires modifying the monolith			* A systematic change is to create a new service
* DevOps / Continuous Delivery is becoming popular, but not  	* Strong focus on DevOps / Continuous Delivery
  yet mainstream
* Uses Middleware for communication (Messaging Middleware)		* Uses API layer for communication (e.g REST)
- Cohesion refers to the degree to which the elements inside a module belong together.Good design has high cohrsion and low coupling.
	